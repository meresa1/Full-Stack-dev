// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENTITIES 
model Customer {
  id          Int    @id @default(autoincrement())
  companyName String @unique
  firstName   String
  lastName    String
  password    String

  request         Request[] // 1 - n
  customerAddress CustomerAddress? // 1 - 1
  orders          Order[] // 1 - n
}

model Item {
  id       Int    @id @default(autoincrement())
  name     String
  type     String
  quantity Int

  request Request[] // 1-n
}

model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  password  String
  username  String

  userAddress UserAddress? // 1 - 1
  orders      Order[] // 1 - n
}

model Driver {
  id           Int    @id @default(autoincrement())
  email        String
  firstName    String
  lastName     String
  licenseNo    String
  licenceGrade String
  phone        Int
  age          Int?
  gender       String
  salary       Int?

  car Car?
}

model Car {
  id             Int     @id @default(autoincrement())
  brand          String
  drivePerLiter  String
  truckPlateNo   Int?
  trailerPlateNo Int
  capacity       String
  status         String
  orders         Order[] // 1 - n

  driver   Driver? @relation(fields: [driverId], references: [id])
  driverId Int?    @unique
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  CustomerAddress CustomerAddress[] // 1 - n
  UserAddress     UserAddress[] // 1 - n
}

model SubCity {
  id   Int    @id @default(autoincrement())
  name String

  CustomerAddress CustomerAddress[] // 1 - n
  UserAddress     UserAddress[] // 1 - n
}

// RELATIONS
model Request {
  id            Int      @id @default(autoincrement())
  tariff        String
  noOfCars      Int
  startingDate  DateTime
  endDate       DateTime
  startingPlace String
  destination   String
  status        Boolean  @default(true)
  pending       Boolean  @default(true)
  remark        String?

  item   Item @relation(fields: [itemId], references: [id])
  itemId Int

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  orders Order[]
}

model CustomerAddress {
  id       Int    @id @default(autoincrement())
  phoneNo  Int
  phoneNo2 Int
  email    String

  city   City? @relation(fields: [cityId], references: [id])
  cityId Int?  @unique

  subCity   SubCity? @relation(fields: [subCityId], references: [id])
  subCityId Int?     @unique

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?      @unique
}

model UserAddress {
  id       Int    @id @default(autoincrement())
  phoneNo  Int
  phoneNo2 Int
  email    String

  city   City? @relation(fields: [cityId], references: [id])
  cityId Int?  @unique

  subCity   SubCity? @relation(fields: [subCityId], references: [id])
  subCityId Int?     @unique

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
}

model Order {
  id Int @id @default(autoincrement())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  car   Car @relation(fields: [carId], references: [id])
  carId Int

  request   Request @relation(fields: [requestId], references: [id])
  requestId Int
}
